#include <WiFi.h>

#include <Wire.h>



#include <stdlib.h>

 

// ThingSpeak Settings

char thingSpeakAddress[] = "api.thingspeak.com";

String writeAPIKey = "MOC473B5K14AELXE";

const int updateThingSpeakInterval = 16 * 1000; // Time interval in milliseconds to update ThingSpeak (number of seconds * 1000 = interval)

 

//buffer for float to string

char buffer[250];

// your network name also called SSID

char ssid[] = "sao";

// your network password

char password[] = "27862302";

 

// initialize the library instance:

WiFiClient client;

 

unsigned long lastConnectionTime = 0; // last time you connected to the server, in milliseconds

boolean lastConnected = false; // state of the connection last time through the main loop

const unsigned long postingInterval = 10*1000; //delay between updates to xively.com

int failedCounter = 0;

 

void setup() {
  
  pinMode(2,INPUT);
  pinMode(6,INPUT);
  Serial.begin(9600);
  
  


// attempt to connect to Wifi network:

Serial.print("Attempting to connect to Network named: ");

// print the network name (SSID);

Serial.println(ssid); 

// Connect to WPA/WPA2 network. Change this line if using open or WEP network:

WiFi.begin(ssid, password);

while ( WiFi.status() != WL_CONNECTED) {

// print dots while we wait to connect

Serial.print(".");

delay(300);

}

Serial.println("\nYou're connected to the network");

Serial.println("Waiting for an ip address");

 

while (WiFi.localIP() == INADDR_NONE) {

// print dots while we wait for an ipaddresss

Serial.print(".");

delay(300);

}

 

Serial.println("\nIP Address obtained");

printWifiStatus();

}


void loop() {
  int temp1;
temp1=analogRead(2);
int temp=(temp1*0.00034)/0.01;
Serial.println(temp);
int sensor=analogRead(6);
 int sen=(sensor*72)/1800;
 Serial.println(sen);
delay(1000);

 

while (client.available()) {

char c = client.read();

Serial.print(c);

} 

 

if (!client.connected() && lastConnected) {

Serial.println();

Serial.println("disconnecting.");

client.stop();

}

 

if (!client.connected() && (millis() - lastConnectionTime>postingInterval)) {

// read the temp sensor:

Serial.print("Temperature :"); 

String sobjt = dtostrf(temp,3,3,buffer);

Serial.print(sobjt); 
Serial.print("Pulse "); 

String objt = dtostrf(sen,3,3,buffer);

Serial.print(objt); 
//Serial.print("Distance :"); 

//String sobjt1 = dtostrf(distance,3,3,buffer);

//Serial.print(sobjt1); 

//send to server

updateThingSpeak("field1=" + sobjt );
updateThingSpeak("field2=" + objt);



}

// store the state of the connection for next time through

// the loop:

lastConnected = client.connected();

}

void updateThingSpeak(String tsData)

{

if (client.connect(thingSpeakAddress, 80))

{ 

client.print("POST /update HTTP/1.1\n");

client.print("Host: api.thingspeak.com\n");

client.print("Connection: close\n");

client.print("X-THINGSPEAKAPIKEY: "+writeAPIKey+"\n");

client.print("Content-Type: application/x-www-form-urlencoded\n");

client.print("Content-Length: ");

client.print(tsData.length());

Serial.println(">>TSDATALength=" + tsData.length());

client.print("\n\n");

 

client.print(tsData);

Serial.println(">>TSDATA=" + tsData);

 

lastConnectionTime = millis();

 

if (client.connected())

{

Serial.println("Connecting to ThingSpeak...");

Serial.println();

 

failedCounter = 0;

}

else

{

failedCounter++;

 

Serial.println("Connection to ThingSpeak failed ("+String(failedCounter, DEC)+")"); 

Serial.println();

}

 

}

else

{

failedCounter++;

 

Serial.println("Connection to ThingSpeak Failed ("+String(failedCounter, DEC)+")"); 

Serial.println();

 

lastConnectionTime = millis(); 

}

}

// This method calculates the number of digits in the

// sensor reading. Since each digit of the ASCII decimal

// representation is a byte, the number of digits equals

// the number of bytes:

 

void printWifiStatus() {

// print the SSID of the network you're attached to:

Serial.print("SSID: ");

Serial.println(WiFi.SSID());

 

// print your WiFi shield's IP address:

IPAddress ip = WiFi.localIP();

Serial.print("IP Address: ");

Serial.println(ip);

 

// print the received signal strength:

long rssi = WiFi.RSSI();

Serial.print("signal strength (RSSI):");

Serial.print(rssi);

Serial.println(" dBm");

}

 
